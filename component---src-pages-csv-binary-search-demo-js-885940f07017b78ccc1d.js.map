{"version":3,"sources":["webpack://gatsby-test/./src/pages/csvBinarySearchDemo.js"],"names":["NEWLINE_CHAR","TextDecoder","AntSwitch","withStyles","theme","root","width","height","padding","display","switchBase","color","palette","grey","transform","common","white","opacity","backgroundColor","primary","main","borderColor","thumb","boxShadow","track","border","borderRadius","checked","Switch","React","checkedState","setCheckedState","useGigaData","setUseGigaData","handleUpload","eventObject","undefined","csv_file","target","files","csv_reader","stream","getReader","byteIndex","read","then","done","chunk","value","i","length","firstNewLineIndex","startTime","performance","now","binarySearch","IMAGENUMBER","OBJECTNUMBER","window","windowRadius","Math","floor","lowIdx","hiIdx","size","midIdx","windowedLow_midIdx","windowedHi_midIdx","getFirstNewLineIndex","corrected_MidIdx","ImageNumber","ObjectNumber","cellPairColIndex","extractFloatAtColIndex","actualIsGreater","maxIterations","iterationsCount","promises","Array","fill","map","Promise","all","endTime","console","log","fileObject","sliceStartIdx","sliceStopIdx","fileReader","slice","processText","Error","index","lineIndex","colIndex","windowSize","commaCount","accumString","Number","String","fromCharCode","aria-label","component","type","hidden","onChange","container","alignItems","spacing","item","name"],"mappings":"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","file":"component---src-pages-csv-binary-search-demo-js-885940f07017b78ccc1d.js","sourcesContent":["import React from 'react';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst NEWLINE_CHAR = 10;\r\nconst COMMA_CHAR = 44;\r\n\r\nconst DEBUG = true;\r\nvar dummy = null;\r\nvar TEXT_ENCODER = new TextDecoder();\r\n\r\nfunction CsvBinarySearchDemo() {\r\n\tconst [checkedState, setCheckedState] = React.useState(true);\r\n\tconst [useGigaData, setUseGigaData] = React.useState(true);\r\n\r\n\tconst handleUpload = async (eventObject) => {\r\n\t\tconst csv_file = eventObject.target.files[0];\r\n\t\tif (csv_file === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst csv_reader = csv_file.stream().getReader();\r\n\r\n\t\t// console.log('test getLastNewLineIndex:');\r\n\t\t// getFirstNewLineIndex(csv_file, 0, 5289 + 1).then((firstIndex) => {\r\n\t\t// \tgetLastNewLineIndex(csv_file, 0, 5289 + 5289 + 500).then((lastIndex) => {\r\n\t\t// \t\tconsole.log(firstIndex, lastIndex);\r\n\t\t// \t\tcsv_file\r\n\t\t// \t\t\t.slice(firstIndex, lastIndex)\r\n\t\t// \t\t\t.text()\r\n\t\t// \t\t\t.then((r) => console.log(r.slice(0, 20)));\r\n\t\t// \t});\r\n\t\t// });\r\n\r\n\t\t// get first line index to estimate window radius\r\n\t\tvar byteIndex = 0;\r\n\t\tcsv_reader\r\n\t\t\t.read()\r\n\t\t\t.then(function processText({ done, value: chunk }) {\r\n\t\t\t\t// javascript reads in byte chunks of a certain size each of which is a subset of the file\r\n\t\t\t\tfor (var i = 0; i < chunk.length; i++) {\r\n\t\t\t\t\tif (chunk[i] === NEWLINE_CHAR) {\r\n\t\t\t\t\t\treturn byteIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbyteIndex++;\r\n\t\t\t\t}\r\n\t\t\t\treturn -1;\r\n\t\t\t})\r\n\t\t\t.then(async (firstNewLineIndex) => {\r\n\t\t\t\t// const IMAGENUMBER = 270;\r\n\t\t\t\t// const OBJECTNUMBER = 16;\r\n\t\t\t\tconst startTime = performance.now();\r\n\t\t\t\tconst binarySearch = async function (IMAGENUMBER, OBJECTNUMBER) {\r\n\t\t\t\t\tconst window = firstNewLineIndex + 500;\r\n\t\t\t\t\tconst windowRadius = Math.floor(window / 2);\r\n\r\n\t\t\t\t\tvar lowIdx = 0;\r\n\t\t\t\t\tvar hiIdx = csv_file.size - 1;\r\n\t\t\t\t\tvar midIdx = Math.floor((lowIdx + hiIdx) / 2);\r\n\t\t\t\t\tvar windowedLow_midIdx = midIdx - windowRadius;\r\n\t\t\t\t\tvar windowedHi_midIdx = midIdx + windowRadius;\r\n\t\t\t\t\t// const newline_midIdx = getFirstNewLineIndex();\r\n\t\t\t\t\tvar corrected_MidIdx = await getFirstNewLineIndex(csv_file, windowedLow_midIdx, windowedHi_midIdx);\r\n\t\t\t\t\t// console.log(`corrected_MidIdx: ${corrected_MidIdx}`);\r\n\t\t\t\t\tvar ImageNumber = -1;\r\n\t\t\t\t\tvar ObjectNumber = -1;\r\n\r\n\t\t\t\t\tconst cellPairColIndex = useGigaData ? 1 : 0;\r\n\r\n\t\t\t\t\t// if (useGigaData) {\r\n\t\t\t\t\t// \tconst cellPair = await extractFloatPairAtColIndex(csv_file, corrected_MidIdx, 1, window);\r\n\t\t\t\t\t// \tvar ImageNumber = cellPair.ImageNumber;\r\n\t\t\t\t\t// \tvar ObjectNumber = cellPair.ObjectNumber;\r\n\t\t\t\t\t// } else {\r\n\t\t\t\t\t// \tconst cellPair = await extractFloatPairAtColIndex(csv_file, corrected_MidIdx, 0, window);\r\n\t\t\t\t\t// \tvar ImageNumber = cellPair.ImageNumber;\r\n\t\t\t\t\t// \tvar ObjectNumber = cellPair.ObjectNumber;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// console.log('perobj', ImageNumber, ObjectNumber);\r\n\t\t\t\t\tImageNumber = await extractFloatAtColIndex(csv_file, corrected_MidIdx, cellPairColIndex, window);\r\n\r\n\t\t\t\t\t// console.log(`ImageNumber: ${ImageNumber}`);\r\n\t\t\t\t\tvar actualIsGreater = true;\r\n\t\t\t\t\tif (ImageNumber === IMAGENUMBER) {\r\n\t\t\t\t\t\tObjectNumber = await extractFloatAtColIndex(\r\n\t\t\t\t\t\t\tcsv_file,\r\n\t\t\t\t\t\t\tcorrected_MidIdx,\r\n\t\t\t\t\t\t\tcellPairColIndex + 1,\r\n\t\t\t\t\t\t\twindow\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tObjectNumber = await extractFloatAtColIndex(\r\n\t\t\t\t\t\t\tcsv_file,\r\n\t\t\t\t\t\t\tcorrected_MidIdx,\r\n\t\t\t\t\t\t\tcellPairColIndex + 1,\r\n\t\t\t\t\t\t\twindow\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t// console.log(`ObjectNumber: ${ObjectNumber}`);\r\n\t\t\t\t\t\tactualIsGreater = ObjectNumber < OBJECTNUMBER;\r\n\t\t\t\t\t\t// console.log(`ObjectNumber: ${ObjectNumber}`);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactualIsGreater = ImageNumber < IMAGENUMBER;\r\n\t\t\t\t\t\t// console.log(`ImageNumber: ${ImageNumber}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// console.log(`actualIsGreater: ${actualIsGreater}`);\r\n\t\t\t\t\t// var actualIsGreater =\r\n\t\t\t\t\t// \tImageNumber === IMAGENUMBER ? ObjectNumber < OBJECTNUMBER : ImageNumber < IMAGENUMBER;\r\n\r\n\t\t\t\t\tconst maxIterations = 100;\r\n\t\t\t\t\tvar iterationsCount = 0;\r\n\t\t\t\t\twhile (\r\n\t\t\t\t\t\t(IMAGENUMBER !== ImageNumber || OBJECTNUMBER !== ObjectNumber) &&\r\n\t\t\t\t\t\titerationsCount++ < maxIterations\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif (actualIsGreater) {\r\n\t\t\t\t\t\t\tvar lowIdx = corrected_MidIdx;\r\n\t\t\t\t\t\t\tvar hiIdx = hiIdx;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar lowIdx = lowIdx;\r\n\t\t\t\t\t\t\tvar hiIdx = corrected_MidIdx;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmidIdx = Math.floor((lowIdx + hiIdx) / 2);\r\n\r\n\t\t\t\t\t\tvar windowedLow_midIdx = midIdx - windowRadius;\r\n\t\t\t\t\t\tvar windowedHi_midIdx = midIdx + windowRadius;\r\n\t\t\t\t\t\t// console.log(lowIdx, hiIdx, midIdx, windowRadius);\r\n\t\t\t\t\t\t// const newline_midIdx = getFirstNewLineIndex()\r\n\t\t\t\t\t\tvar corrected_MidIdx = await getFirstNewLineIndex(\r\n\t\t\t\t\t\t\tcsv_file,\r\n\t\t\t\t\t\t\twindowedLow_midIdx,\r\n\t\t\t\t\t\t\twindowedHi_midIdx\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t// console.log(`corrected_MidIdx: ${corrected_MidIdx}`);\r\n\t\t\t\t\t\tImageNumber = await extractFloatAtColIndex(\r\n\t\t\t\t\t\t\tcsv_file,\r\n\t\t\t\t\t\t\tcorrected_MidIdx,\r\n\t\t\t\t\t\t\tcellPairColIndex,\r\n\t\t\t\t\t\t\twindow\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t// console.log(`ImageNumber: ${ImageNumber}`);\r\n\t\t\t\t\t\t// ImageNumber = await extractFloatAtColIndex(\r\n\t\t\t\t\t\t// \tcsv_file,\r\n\t\t\t\t\t\t// \tcorrected_MidIdx,\r\n\t\t\t\t\t\t// \tcellPairColIndex,\r\n\t\t\t\t\t\t// \twindow\r\n\t\t\t\t\t\t// );\r\n\t\t\t\t\t\t// console.log(`ImageNumber: ${ImageNumber}`);\r\n\t\t\t\t\t\tif (ImageNumber === IMAGENUMBER) {\r\n\t\t\t\t\t\t\tObjectNumber = await extractFloatAtColIndex(\r\n\t\t\t\t\t\t\t\tcsv_file,\r\n\t\t\t\t\t\t\t\tcorrected_MidIdx,\r\n\t\t\t\t\t\t\t\tcellPairColIndex + 1,\r\n\t\t\t\t\t\t\t\twindow\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t// console.log(`ObjectNumber: ${ObjectNumber}`);\r\n\t\t\t\t\t\t\t// ObjectNumber = await extractFloatAtColIndex(\r\n\t\t\t\t\t\t\t// \tcsv_file,\r\n\t\t\t\t\t\t\t// \tcorrected_MidIdx,\r\n\t\t\t\t\t\t\t// \tcellPairColIndex + 1,\r\n\t\t\t\t\t\t\t// \twindow\r\n\t\t\t\t\t\t\t// );\r\n\t\t\t\t\t\t\t// console.log(`ObjectNumber: ${ObjectNumber}`);\r\n\t\t\t\t\t\t\tactualIsGreater = ObjectNumber < OBJECTNUMBER;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactualIsGreater = ImageNumber < IMAGENUMBER;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log('perobj', ImageNumber, ObjectNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// console.log(`iterationsCount: ${iterationsCount}`);\r\n\t\t\t\t\t// console.log(`ImageNumber,ObjectNumber: ${ImageNumber},${ObjectNumber}`);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// for (var i = 0; i < 1; i++) {\r\n\t\t\t\t// \tawait binarySearch(270, 16);\r\n\t\t\t\t// }\r\n\t\t\t\tconst promises = new Array(100).fill(0).map(() => binarySearch(270, 16));\r\n\t\t\t\t// console.log(promises);\r\n\t\t\t\tPromise.all(promises).then(() => {\r\n\t\t\t\t\tconst endTime = performance.now();\r\n\t\t\t\t\tconsole.log('Time Took: ' + (endTime - startTime));\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// await binarySearch(100, 1);\r\n\t\t\t\t// await binarySearch(10, 1);\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst getFirstNewLineIndex = function (fileObject, sliceStartIdx, sliceStopIdx) {\r\n\t\tconst fileReader = fileObject.slice(sliceStartIdx, sliceStopIdx).stream().getReader();\r\n\t\t// console.log(sliceStopIdx - sliceStartIdx);\r\n\t\tvar byteIndex = 0;\r\n\t\t// console.log('getFirstNewLineIndex');\r\n\t\t// const chunksizes = [];\r\n\t\treturn fileReader\r\n\t\t\t.read()\r\n\t\t\t.then(function processText({ done, value: chunk }) {\r\n\t\t\t\t// chunksizes.push(chunk.length);\r\n\t\t\t\tif (done) {\r\n\t\t\t\t\tthrow new Error(\"getFirstNewLineIndex: Can't find a newline\");\r\n\t\t\t\t}\r\n\t\t\t\t// javascript reads in byte chunks of a certain size each of which is a subset of the file\r\n\t\t\t\tfor (var i = 0; i < chunk.length; i++) {\r\n\t\t\t\t\tif (chunk[i] === NEWLINE_CHAR) {\r\n\t\t\t\t\t\t// console.log(chunksizes);\r\n\t\t\t\t\t\treturn byteIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbyteIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn fileReader.read().then(processText);\r\n\t\t\t})\r\n\t\t\t.then((index) => sliceStartIdx + index);\r\n\t};\r\n\r\n\tconst getLastNewLineIndex = function (fileObject, sliceStartIdx, sliceStopIdx) {\r\n\t\tconst fileReader = fileObject.slice(sliceStartIdx, sliceStopIdx).stream().getReader();\r\n\t\tvar lastNewLineIndex = -1;\r\n\t\tvar byteIndex = 0;\r\n\t\treturn fileReader\r\n\t\t\t.read()\r\n\t\t\t.then(function processText({ done, value: chunk }) {\r\n\t\t\t\tif (done) {\r\n\t\t\t\t\tif (lastNewLineIndex === -1) {\r\n\t\t\t\t\t\tthrow new Error(\"getLastNewLineIndex: Can't find a newline\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn lastNewLineIndex;\r\n\t\t\t\t}\r\n\t\t\t\t// javascript reads in byte chunks of a certain size each of which is a subset of the file\r\n\t\t\t\tfor (var i = 0; i < chunk.length; i++) {\r\n\t\t\t\t\tif (chunk[i] === NEWLINE_CHAR) {\r\n\t\t\t\t\t\tlastNewLineIndex = byteIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbyteIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn fileReader.read().then(processText);\r\n\t\t\t})\r\n\t\t\t.then((index) => sliceStartIdx + index);\r\n\t};\r\n\r\n\tconst extractFloatAtColIndex = function (fileObject, lineIndex, colIndex, windowSize) {\r\n\t\tconst fileReader = fileObject\r\n\t\t\t.slice(lineIndex, lineIndex + windowSize)\r\n\t\t\t.stream()\r\n\t\t\t.getReader();\r\n\r\n\t\tvar commaCount = (colIndex <= 0 ? 0 : colIndex) + 1;\r\n\t\tvar accumString = '';\r\n\t\tconsole.log('extractFloatAtColIndex');\r\n\t\treturn fileReader.read().then(function processText({ done, value: chunk }) {\r\n\t\t\t// console.log(chunk.length, windowSize);\r\n\t\t\tif (done) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// javascript reads in byte chunks of a certain size each of which is a subset of the file\r\n\t\t\tfor (var i = 0; i < chunk.length; i++) {\r\n\t\t\t\tif (i !== 0 && chunk[i] === NEWLINE_CHAR) {\r\n\t\t\t\t\tif (accumString.length > 0) {\r\n\t\t\t\t\t\treturn Number(accumString);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif (chunk[i] === COMMA_CHAR) {\r\n\t\t\t\t\tif (commaCount === 0) {\r\n\t\t\t\t\t\treturn Number(accumString);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcommaCount--;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (commaCount === 1) {\r\n\t\t\t\t\taccumString += String.fromCharCode(chunk[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn fileReader.read().then(processText);\r\n\t\t});\r\n\t};\r\n\r\n\tconst extractFloatAtColIndex_decoder = function (fileObject, lineIndex, colIndex, windowSize) {\r\n\t\tconst fileReader = fileObject\r\n\t\t\t.slice(lineIndex, lineIndex + windowSize)\r\n\t\t\t.stream()\r\n\t\t\t.getReader();\r\n\r\n\t\tvar commaCount = colIndex <= 0 ? 0 : colIndex;\r\n\t\t// var accumString = '';\r\n\t\tvar startIndex = 0;\r\n\t\tconst mustTrimComma = commaCount > 0 ? true : false;\r\n\r\n\t\treturn fileReader.read().then(function processText({ done, value: chunk }) {\r\n\t\t\tif (done) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// javascript reads in byte chunks of a certain size each of which is a subset of the file\r\n\t\t\tfor (var i = 0; i < chunk.length; i++) {\r\n\t\t\t\tif (i !== 0 && chunk[i] === NEWLINE_CHAR) {\r\n\t\t\t\t\tif (i - startIndex > 0) {\r\n\t\t\t\t\t\tconst accumstring = TEXT_ENCODER.decode(chunk.slice(startIndex, i));\r\n\t\t\t\t\t\t// console.log(accumstring);\r\n\t\t\t\t\t\t// console.log(Number(accumstring));\r\n\t\t\t\t\t\treturn Number(accumstring);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif (chunk[i] === COMMA_CHAR) {\r\n\t\t\t\t\tif (commaCount === 0) {\r\n\t\t\t\t\t\tconst accumstring = TEXT_ENCODER.decode(chunk.slice(startIndex, i));\r\n\t\t\t\t\t\t// console.log(accumstring);\r\n\t\t\t\t\t\t// console.log(Number(accumstring));\r\n\t\t\t\t\t\treturn Number(accumstring);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (commaCount === 1) {\r\n\t\t\t\t\t\tif (mustTrimComma) {\r\n\t\t\t\t\t\t\tstartIndex = i + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcommaCount--;\r\n\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn fileReader.read().then(processText);\r\n\t\t});\r\n\t};\r\n\r\n\tconst extractFloatPairAtColIndex = function (fileObject, lineIndex, colIndex, windowSize) {\r\n\t\tconst fileReader = fileObject\r\n\t\t\t.slice(lineIndex, lineIndex + windowSize)\r\n\t\t\t.stream()\r\n\t\t\t.getReader();\r\n\r\n\t\tvar commaCount = (colIndex <= 0 ? 0 : colIndex) + 2;\r\n\t\tvar accumString1 = '';\r\n\t\tvar accumString2 = '';\r\n\t\treturn fileReader.read().then(function processText({ done, value: chunk }) {\r\n\t\t\tif (done) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// javascript reads in byte chunks of a certain size each of which is a subset of the file\r\n\t\t\tfor (var i = 0; i < chunk.length; i++) {\r\n\t\t\t\tif (i !== 0 && chunk[i] === NEWLINE_CHAR) {\r\n\t\t\t\t\tif (accumString1.length > 0 && accumString2.length > 0) {\r\n\t\t\t\t\t\treturn { ImageNumber: Number(accumString1), ObjectNumber: Number(accumString2) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif (chunk[i] === COMMA_CHAR) {\r\n\t\t\t\t\tif (commaCount === 0) {\r\n\t\t\t\t\t\tif (accumString1.length > 0 && accumString2.length > 0) {\r\n\t\t\t\t\t\t\treturn { ImageNumber: Number(accumString1), ObjectNumber: Number(accumString2) };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcommaCount--;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (commaCount === 2) {\r\n\t\t\t\t\taccumString1 += String.fromCharCode(chunk[i]);\r\n\t\t\t\t}\r\n\t\t\t\tif (commaCount === 1) {\r\n\t\t\t\t\taccumString2 += String.fromCharCode(chunk[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn fileReader.read().then(processText);\r\n\t\t});\r\n\t};\r\n\r\n\t// I want to keep track of if the user wants to parse the giga data\r\n\tconst handleChange = function () {\r\n\t\tsetCheckedState(!checkedState);\r\n\t\tsetUseGigaData(!useGigaData);\r\n\r\n\t\tconsole.log(!checkedState);\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Fab aria-label=\"save\" color=\"primary\" component=\"label\">\r\n\t\t\t\tupload csv\r\n\t\t\t\t<input type=\"file\" hidden onChange={handleUpload} />\r\n\t\t\t</Fab>\r\n\t\t\t<Typography component=\"div\">\r\n\t\t\t\t<Grid component=\"label\" container alignItems=\"center\" spacing={1}>\r\n\t\t\t\t\t<Grid item>use per_object</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<AntSwitch checked={checkedState} onChange={handleChange} name=\"checkedC\" />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>use giga data</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Typography>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst AntSwitch = withStyles((theme) => ({\r\n\troot: {\r\n\t\twidth: 28,\r\n\t\theight: 16,\r\n\t\tpadding: 0,\r\n\t\tdisplay: 'flex',\r\n\t},\r\n\tswitchBase: {\r\n\t\tpadding: 2,\r\n\t\tcolor: theme.palette.grey[500],\r\n\t\t'&$checked': {\r\n\t\t\ttransform: 'translateX(12px)',\r\n\t\t\tcolor: theme.palette.common.white,\r\n\t\t\t'& + $track': {\r\n\t\t\t\topacity: 1,\r\n\t\t\t\tbackgroundColor: theme.palette.primary.main,\r\n\t\t\t\tborderColor: theme.palette.primary.main,\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tthumb: {\r\n\t\twidth: 12,\r\n\t\theight: 12,\r\n\t\tboxShadow: 'none',\r\n\t},\r\n\ttrack: {\r\n\t\tborder: `1px solid ${theme.palette.grey[500]}`,\r\n\t\tborderRadius: 16 / 2,\r\n\t\topacity: 1,\r\n\t\tbackgroundColor: theme.palette.common.white,\r\n\t},\r\n\tchecked: {},\r\n}))(Switch);\r\n\r\nexport default CsvBinarySearchDemo;\r\n"],"sourceRoot":""}