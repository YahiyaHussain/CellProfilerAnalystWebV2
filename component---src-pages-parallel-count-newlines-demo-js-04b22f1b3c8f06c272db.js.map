{"version":3,"sources":["webpack://gatsby-test/./src/pages/parallelCountNewlinesDemo.js"],"names":["React","checkedState","setCheckedState","useGigaData","setUseGigaData","handleUpload","eventObject","undefined","csv_file","target","files","console","log","test2","chunkMB","Promise","resolve","results","count","CHUNK_SIZE","NUMBER_OF_WORKERS","navigator","hardwareConcurrency","NUMBER_OF_CHUNKS","Math","floor","size","workerSlicesAssignments","Array","fill","map","e","chunk_index","currentWorkerIndex","startIndex","slice","stopIndex","push","workerIndex","workerName","newLineWorker","Worker","addEventListener","event","message","selfDestructingEventHandler","removeEventListener","terminate","Uint32Array","data","reduce","acc","length","newLines","i","j","postMessage","file","slices","test1","promises","performance","now","p","myChunkIndex","fileReader","FileReader","sliced_file","newlineIndices","onload","buffer","Uint8Array","result","buffer_index","readAsArrayBuffer","all","then","newlineIndicesArray","startNewLineProcessing","AntSwitch","withStyles","theme","root","width","height","padding","display","switchBase","color","palette","grey","transform","common","white","opacity","backgroundColor","primary","main","borderColor","thumb","boxShadow","track","border","borderRadius","checked","Switch","aria-label","component","type","hidden","onChange","container","alignItems","spacing","item","name"],"mappings":"6NA8MA,UApMA,WAA8B,IAAD,EACYA,YAAe,GAAhDC,EADqB,KACPC,EADO,OAEUF,YAAe,GAA9CG,EAFqB,KAERC,EAFQ,KAQtBC,EAAY,mCAAG,WAAOC,GAAP,qFAGHC,KADXC,EAAWF,EAAYG,OAAOC,MAAM,IAFtB,wDAMpBC,QAAQC,IAAI,cAAeJ,GAErBK,EAAQ,SAAUC,GACvB,OAAO,IAAIC,SAAQ,SAACC,GAcnB,IAbA,IAAIC,EAAU,GACVC,EAAQ,EAENC,EAAuB,KAAVL,EAAiB,KAI9BM,EAAoBC,UAAUC,oBAC9BC,EAAmBC,KAAKC,MAAMjB,EAASkB,KAAOP,GAAc,EAE5DQ,EAA0BC,MAAMR,GACpCS,KAAK,MACLC,KAAI,SAACC,GAAD,MAAO,MACJC,EAAc,EAAGA,EAAcT,EAAkBS,IAAe,CACxE,IAAIC,EAAqBT,KAAKC,MAAOO,EAAcT,EAAoBH,GAIjEc,EAAaF,EAAcb,EAE3BgB,EAAQ,CAAED,aAAYE,UADVF,EAAaf,GAI/BQ,EARAM,EACCA,EAAqBb,EAAoBa,EAAqBb,EAAoB,GAOvCiB,KAAKF,GAElDxB,QAAQC,IAAIe,GACZ,IA3B+B,eA2BtBW,GACR,IAAMC,EAAaD,EACbE,EAAgB,IAAIC,OAAO,uBACjCD,EAAcE,iBAAiB,SAAS,SAACC,GACxChC,QAAQC,IAAR,IAAgB2B,EAAhB,UAAqCI,EAAMC,QAASD,MAsBrDH,EAAcE,iBAAiB,WAnBG,SAA9BG,EAA+BF,GAMlC,GALAH,EAAcM,oBAAoB,UAAWD,GAC7CL,EAAcO,YACd7B,IACAD,EAAQqB,GAAe,IAAIU,YAAYL,EAAMM,MAEzC/B,IAAUE,EAAmB,CACZH,EAAQiC,QAAO,SAACC,EAAKpB,GAAN,OAAYoB,EAAMpB,EAAEqB,SAAQ,GAE/D,IAFA,IACMC,EAAW,GACRC,EAAI,EAAGA,EAAIrC,EAAQmC,OAAQE,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAItC,EAAQqC,GAAGF,OAAQG,IACtCF,EAAShB,KAAKpB,EAAQqC,GAAGC,IAK3BvC,QAIFwB,EAAcgB,YAAY,CACzBC,KAAMjD,EACNkD,OAAQ/B,EAAwBW,MA7BzBA,EAAc,EAAGA,EAAclB,EAAmBkB,IAAgB,EAAlEA,OAoCLqB,EAxEc,mCAwEN,WAAgB7C,GAAhB,6EAKb,IAJMK,EAAuB,KAAVL,EAAiB,KACpCH,QAAQC,IAAI,mBAAqBE,GAC3B8C,EAAW,GACcC,YAAYC,MAClC9B,EAAc,EAAGA,EAAcxB,EAASkB,KAAMM,GAAeb,EAC/D4C,EAAI,IAAIhD,SAAQ,SAACC,GACtB,IAAMgD,EAAehC,EACfiC,EAAa,IAAIC,WACjBC,EAAc3D,EAAS2B,MAAM6B,EAAcA,EAAe7C,GAC1DiD,EAAiB,GACvBH,EAAWI,OAAS,WAEnB,IADA,IAAMC,EAAS,IAAIC,WAAWN,EAAWO,QAChCC,EAAe,EAAGA,EAAeH,EAAOlB,OAAQqB,IA/F1C,KAgGVH,EAAOG,IACVL,EAAe/B,KAAK2B,EAAeS,GAIrCzD,EAAQoD,IAETH,EAAWS,kBAAkBP,MAE9BP,EAASvB,KAAK0B,GAvBF,yBA0BNhD,QAAQ4D,IAAIf,GAAUgB,MAAK,SAACC,QA1BtB,2CAxEM,sDAsGhBC,EAAyBjB,YAAYC,MAtGrB,SAuGdH,EAAM,IAvGQ,cAwGpBhD,QAAQC,IAAR,sBAAkCiD,YAAYC,MAAQgB,GAA0B,IAAhF,YACAA,EAAyBjB,YAAYC,MAzGjB,UA0GdjD,EAAM,IA1GQ,eA2GpBF,QAAQC,IAAR,wBAAoCiD,YAAYC,MAAQgB,GAA0B,IAAlF,YACAA,EAAyBjB,YAAYC,MA5GjB,UA6GdH,EAAM,IA7GQ,eA8GpBhD,QAAQC,IAAR,sBAAkCiD,YAAYC,MAAQgB,GAA0B,IAAhF,YACAA,EAAyBjB,YAAYC,MA/GjB,UAgHdjD,EAAM,IAhHQ,eAiHpBF,QAAQC,IAAR,wBAAoCiD,YAAYC,MAAQgB,GAA0B,IAAlF,YACAA,EAAyBjB,YAAYC,MAlHjB,UAmHdH,EAAM,IAnHQ,eAoHpBhD,QAAQC,IAAR,sBAAkCiD,YAAYC,MAAQgB,GAA0B,IAAhF,YACAA,EAAyBjB,YAAYC,MArHjB,UAsHdjD,EAAM,IAtHQ,QAuHpBF,QAAQC,IAAR,wBAAoCiD,YAAYC,MAAQgB,GAA0B,IAAlF,YAvHoB,4CAAH,sDA+HZC,GAAYC,QAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACLC,MAAO,GACPC,OAAQ,GACRC,QAAS,EACTC,QAAS,QAEVC,WAAY,CACXF,QAAS,EACTG,MAAOP,EAAMQ,QAAQC,KAAK,KAC1B,YAAa,CACZC,UAAW,mBACXH,MAAOP,EAAMQ,QAAQG,OAAOC,MAC5B,aAAc,CACbC,QAAS,EACTC,gBAAiBd,EAAMQ,QAAQO,QAAQC,KACvCC,YAAajB,EAAMQ,QAAQO,QAAQC,QAItCE,MAAO,CACNhB,MAAO,GACPC,OAAQ,GACRgB,UAAW,QAEZC,MAAO,CACNC,OAAO,aAAcrB,EAAMQ,QAAQC,KAAK,KACxCa,aAAc,EACdT,QAAS,EACTC,gBAAiBd,EAAMQ,QAAQG,OAAOC,OAEvCW,QAAS,MA/BQxB,CAgCdyB,KAUJ,OACC,2BACC,gBAAC,IAAD,CAAKC,aAAW,OAAOlB,MAAM,UAAUmB,UAAU,SAAjD,aAEC,yBAAOC,KAAK,OAAOC,QAAM,EAACC,SAAUzG,KAErC,gBAAC,IAAD,CAAYsG,UAAU,OACrB,gBAAC,IAAD,CAAMA,UAAU,QAAQI,WAAS,EAACC,WAAW,SAASC,QAAS,GAC9D,gBAAC,IAAD,CAAMC,MAAI,GAAV,kBACA,gBAAC,IAAD,CAAMA,MAAI,GACT,gBAACnC,EAAD,CAAWyB,QAASvG,EAAc6G,SAjBlB,WACpB5G,GAAiBD,GACjBG,GAAgBD,GAEhBQ,QAAQC,KAAKX,IAaiDkH,KAAK,cAEhE,gBAAC,IAAD,CAAMD,MAAI,GAAV","file":"component---src-pages-parallel-count-newlines-demo-js-04b22f1b3c8f06c272db.js","sourcesContent":["import React from 'react';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst NEWLINE_CHAR = 10;\r\n\r\nfunction CountNewlinesDemo() {\r\n\tconst [checkedState, setCheckedState] = React.useState(true);\r\n\tconst [useGigaData, setUseGigaData] = React.useState(true);\r\n\r\n\t//For giga dataset use \"Files\" tab at the bottom of this page and get a \"Plate...\" file\r\n\t// gunzip it and get the folder and pass in the .sql file in the Extracted Features folder which\r\n\t// is converted to a csv file http://gigadb.org/dataset/view/id/100351/\r\n\t//For the per_object.csv use this link and just pass in the per_object.csv http://d1zymp9ayga15t.cloudfront.net/content/Examplezips/cpa_2.0_example.zip\r\n\tconst handleUpload = async (eventObject) => {\r\n\t\t// upload a single file which is a csv\r\n\t\tconst csv_file = eventObject.target.files[0];\r\n\t\tif (csv_file === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconsole.log('file found:', csv_file);\r\n\r\n\t\tconst test2 = function (chunkMB) {\r\n\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\tlet results = [];\r\n\t\t\t\tlet count = 0;\r\n\r\n\t\t\t\tconst CHUNK_SIZE = chunkMB * 1024 * 1024;\r\n\r\n\t\t\t\t// console.log(Math.floor(csv_file.size / CHUNK_SIZE));\r\n\r\n\t\t\t\tconst NUMBER_OF_WORKERS = navigator.hardwareConcurrency;\r\n\t\t\t\tconst NUMBER_OF_CHUNKS = Math.floor(csv_file.size / CHUNK_SIZE) + 1;\r\n\r\n\t\t\t\tconst workerSlicesAssignments = Array(NUMBER_OF_WORKERS)\r\n\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t.map((e) => []);\r\n\t\t\t\tfor (let chunk_index = 0; chunk_index < NUMBER_OF_CHUNKS; chunk_index++) {\r\n\t\t\t\t\tlet currentWorkerIndex = Math.floor((chunk_index / NUMBER_OF_CHUNKS) * NUMBER_OF_WORKERS);\r\n\t\t\t\t\tcurrentWorkerIndex =\r\n\t\t\t\t\t\tcurrentWorkerIndex < NUMBER_OF_WORKERS ? currentWorkerIndex : NUMBER_OF_WORKERS - 1;\r\n\t\t\t\t\t// console.log(currentWorkerIndex);\r\n\t\t\t\t\tconst startIndex = chunk_index * CHUNK_SIZE;\r\n\t\t\t\t\tconst stopIndex = startIndex + CHUNK_SIZE;\r\n\t\t\t\t\tconst slice = { startIndex, stopIndex };\r\n\t\t\t\t\t// console.log(slice);\r\n\r\n\t\t\t\t\tworkerSlicesAssignments[currentWorkerIndex].push(slice);\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(workerSlicesAssignments);\r\n\t\t\t\tfor (let workerIndex = 0; workerIndex < NUMBER_OF_WORKERS; workerIndex++) {\r\n\t\t\t\t\tconst workerName = workerIndex;\r\n\t\t\t\t\tconst newLineWorker = new Worker('../newlineWorker.js');\r\n\t\t\t\t\tnewLineWorker.addEventListener('error', (event) => {\r\n\t\t\t\t\t\tconsole.log(`[${workerName}] Error`, event.message, event);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tlet selfDestructingEventHandler = (event) => {\r\n\t\t\t\t\t\tnewLineWorker.removeEventListener('message', selfDestructingEventHandler);\r\n\t\t\t\t\t\tnewLineWorker.terminate();\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\tresults[workerIndex] = new Uint32Array(event.data);\r\n\t\t\t\t\t\t// console.log(count);\r\n\t\t\t\t\t\tif (count === NUMBER_OF_WORKERS) {\r\n\t\t\t\t\t\t\tconst numNewlines = results.reduce((acc, e) => acc + e.length, 0);\r\n\t\t\t\t\t\t\tconst newLines = [];\r\n\t\t\t\t\t\t\tfor (let i = 0; i < results.length; i++) {\r\n\t\t\t\t\t\t\t\tfor (let j = 0; j < results[i].length; j++) {\r\n\t\t\t\t\t\t\t\t\tnewLines.push(results[i][j]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// console.log(newLines);\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tnewLineWorker.addEventListener('message', selfDestructingEventHandler);\r\n\t\t\t\t\tnewLineWorker.postMessage({\r\n\t\t\t\t\t\tfile: csv_file,\r\n\t\t\t\t\t\tslices: workerSlicesAssignments[workerIndex],\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t//\r\n\t\t};\r\n\r\n\t\tconst test1 = async function (chunkMB) {\r\n\t\t\tconst CHUNK_SIZE = chunkMB * 1024 * 1024;\r\n\t\t\tconsole.log('chunking by mb: ' + chunkMB);\r\n\t\t\tconst promises = [];\r\n\t\t\tconst startNewLineProcessing = performance.now();\r\n\t\t\tfor (var chunk_index = 0; chunk_index < csv_file.size; chunk_index += CHUNK_SIZE) {\r\n\t\t\t\tconst p = new Promise((resolve) => {\r\n\t\t\t\t\tconst myChunkIndex = chunk_index;\r\n\t\t\t\t\tconst fileReader = new FileReader();\r\n\t\t\t\t\tconst sliced_file = csv_file.slice(myChunkIndex, myChunkIndex + CHUNK_SIZE);\r\n\t\t\t\t\tconst newlineIndices = [];\r\n\t\t\t\t\tfileReader.onload = function () {\r\n\t\t\t\t\t\tconst buffer = new Uint8Array(fileReader.result);\r\n\t\t\t\t\t\tfor (var buffer_index = 0; buffer_index < buffer.length; buffer_index++) {\r\n\t\t\t\t\t\t\tif (buffer[buffer_index] === NEWLINE_CHAR) {\r\n\t\t\t\t\t\t\t\tnewlineIndices.push(myChunkIndex + buffer_index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log('finished: ' + myChunkIndex);\r\n\t\t\t\t\t\tresolve(newlineIndices);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tfileReader.readAsArrayBuffer(sliced_file);\r\n\t\t\t\t});\r\n\t\t\t\tpromises.push(p);\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.all(promises).then((newlineIndicesArray) => {\r\n\t\t\t\t// console.log(newlineIndicesArray.reduce((e1, e2) => e1.concat(e2)));\r\n\t\t\t});\r\n\t\t};\r\n\t\tvar startNewLineProcessing = performance.now();\r\n\t\tawait test1(24);\r\n\t\tconsole.log(`main Finished in: ${(performance.now() - startNewLineProcessing) / 1000} seconds`);\r\n\t\tstartNewLineProcessing = performance.now();\r\n\t\tawait test2(24);\r\n\t\tconsole.log(`worker Finished in: ${(performance.now() - startNewLineProcessing) / 1000} seconds`);\r\n\t\tstartNewLineProcessing = performance.now();\r\n\t\tawait test1(20);\r\n\t\tconsole.log(`main Finished in: ${(performance.now() - startNewLineProcessing) / 1000} seconds`);\r\n\t\tstartNewLineProcessing = performance.now();\r\n\t\tawait test2(20);\r\n\t\tconsole.log(`worker Finished in: ${(performance.now() - startNewLineProcessing) / 1000} seconds`);\r\n\t\tstartNewLineProcessing = performance.now();\r\n\t\tawait test1(16);\r\n\t\tconsole.log(`main Finished in: ${(performance.now() - startNewLineProcessing) / 1000} seconds`);\r\n\t\tstartNewLineProcessing = performance.now();\r\n\t\tawait test2(16);\r\n\t\tconsole.log(`worker Finished in: ${(performance.now() - startNewLineProcessing) / 1000} seconds`);\r\n\t\t// await test(4);\r\n\t\t// for (var i = 8; i < 64; i += 8) {\r\n\t\t// \tawait test(i);\r\n\t\t// }\r\n\t};\r\n\r\n\t// some material ui theme I copied just cause\r\n\tconst AntSwitch = withStyles((theme) => ({\r\n\t\troot: {\r\n\t\t\twidth: 28,\r\n\t\t\theight: 16,\r\n\t\t\tpadding: 0,\r\n\t\t\tdisplay: 'flex',\r\n\t\t},\r\n\t\tswitchBase: {\r\n\t\t\tpadding: 2,\r\n\t\t\tcolor: theme.palette.grey[500],\r\n\t\t\t'&$checked': {\r\n\t\t\t\ttransform: 'translateX(12px)',\r\n\t\t\t\tcolor: theme.palette.common.white,\r\n\t\t\t\t'& + $track': {\r\n\t\t\t\t\topacity: 1,\r\n\t\t\t\t\tbackgroundColor: theme.palette.primary.main,\r\n\t\t\t\t\tborderColor: theme.palette.primary.main,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t\tthumb: {\r\n\t\t\twidth: 12,\r\n\t\t\theight: 12,\r\n\t\t\tboxShadow: 'none',\r\n\t\t},\r\n\t\ttrack: {\r\n\t\t\tborder: `1px solid ${theme.palette.grey[500]}`,\r\n\t\t\tborderRadius: 16 / 2,\r\n\t\t\topacity: 1,\r\n\t\t\tbackgroundColor: theme.palette.common.white,\r\n\t\t},\r\n\t\tchecked: {},\r\n\t}))(Switch);\r\n\r\n\t// I want to keep track of if the user wants to parse the giga data\r\n\tconst handleChange = function () {\r\n\t\tsetCheckedState(!checkedState);\r\n\t\tsetUseGigaData(!useGigaData);\r\n\r\n\t\tconsole.log(!checkedState);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Fab aria-label=\"save\" color=\"primary\" component=\"label\">\r\n\t\t\t\tupload csv\r\n\t\t\t\t<input type=\"file\" hidden onChange={handleUpload} />\r\n\t\t\t</Fab>\r\n\t\t\t<Typography component=\"div\">\r\n\t\t\t\t<Grid component=\"label\" container alignItems=\"center\" spacing={1}>\r\n\t\t\t\t\t<Grid item>use per_object</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<AntSwitch checked={checkedState} onChange={handleChange} name=\"checkedC\" />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>use giga data</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Typography>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CountNewlinesDemo;\r\n"],"sourceRoot":""}