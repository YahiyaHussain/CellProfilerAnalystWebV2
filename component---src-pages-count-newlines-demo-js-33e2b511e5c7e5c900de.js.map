{"version":3,"sources":["webpack://gatsby-test/./src/pages/countNewlinesDemo.js"],"names":["React","checkedState","setCheckedState","useGigaData","setUseGigaData","handleUpload","eventObject","undefined","csv_file","target","files","console","log","csv_reader","stream","getReader","lineIndex","newLineIndices","timeBeforeParsingNewlines","performance","now","read","then","processText","done","chunk","value","length","timeFinished","diffs","Array","fill","i","push","index","Math","floor","timeBeforeExtractingLines","Promise","all","map","e","lineBlob","slice","text","r","trim","split","Number","makeLineBlobPromise","AntSwitch","withStyles","theme","root","width","height","padding","display","switchBase","color","palette","grey","transform","common","white","opacity","backgroundColor","primary","main","borderColor","thumb","boxShadow","track","border","borderRadius","checked","Switch","aria-label","component","type","hidden","onChange","container","alignItems","spacing","item","name"],"mappings":"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","file":"component---src-pages-count-newlines-demo-js-33e2b511e5c7e5c900de.js","sourcesContent":["import React from 'react';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst NEWLINE_CHAR = 10;\r\n\r\nfunction CountNewlinesDemo() {\r\n\tconst [checkedState, setCheckedState] = React.useState(true);\r\n\tconst [useGigaData, setUseGigaData] = React.useState(true);\r\n\r\n\t//For giga dataset use \"Files\" tab at the bottom of this page and get a \"Plate...\" file\r\n\t// gunzip it and get the folder and pass in the .sql file in the Extracted Features folder which\r\n\t// is converted to a csv file http://gigadb.org/dataset/view/id/100351/\r\n\t//For the per_object.csv use this link and just pass in the per_object.csv http://d1zymp9ayga15t.cloudfront.net/content/Examplezips/cpa_2.0_example.zip\r\n\tconst handleUpload = async (eventObject) => {\r\n\t\t// upload a single file which is a csv\r\n\t\tconst csv_file = eventObject.target.files[0];\r\n\t\tif (csv_file === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconsole.log('file found:', csv_file);\r\n\r\n\t\tconst csv_reader = csv_file.stream().getReader();\r\n\r\n\t\t// keeps track of the current line in the file\r\n\t\tvar lineIndex = 0;\r\n\t\tvar newLineIndices = [];\r\n\r\n\t\tconst timeBeforeParsingNewlines = performance.now();\r\n\t\tcsv_reader\r\n\t\t\t.read()\r\n\t\t\t.then(function processText({ done, value: chunk }) {\r\n\t\t\t\tif (done) {\r\n\t\t\t\t\tconsole.log(`stream complete with ${newLineIndices.length} lines`);\r\n\t\t\t\t\tconst timeFinished = performance.now();\r\n\t\t\t\t\tconsole.log(`Newline parsing took ${timeFinished - timeBeforeParsingNewlines} milliseconds.`);\r\n\t\t\t\t\tconsole.log(newLineIndices);\r\n\t\t\t\t\tconst diffs = new Array(newLineIndices.length - 1).fill(0);\r\n\t\t\t\t\tfor (var i = 0; i < newLineIndices.length - 1; i++) {\r\n\t\t\t\t\t\tdiffs[i] = newLineIndices[i] - newLineIndices[i + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(diffs);\r\n\t\t\t\t\treturn newLineIndices;\r\n\t\t\t\t}\r\n\t\t\t\t// javascript reads in byte chunks of a certain size each of which is a subset of the file\r\n\t\t\t\tfor (var i = 0; i < chunk.length; i++) {\r\n\t\t\t\t\tif (chunk[i] === NEWLINE_CHAR) {\r\n\t\t\t\t\t\tnewLineIndices.push(lineIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlineIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn csv_reader.read().then(processText);\r\n\t\t\t})\r\n\t\t\t.then((newLineIndices) => {\r\n\t\t\t\tconst index = Math.floor(newLineIndices.length / 2);\r\n\t\t\t\tvar timeBeforeExtractingLines = performance.now();\r\n\r\n\t\t\t\t// extraction function which reads a line and parses it into  an array of floats\r\n\t\t\t\tconst makeLineBlobPromise = function (index) {\r\n\t\t\t\t\tconst lineBlob = csv_file.slice(newLineIndices[index], newLineIndices[index + 1]);\r\n\t\t\t\t\t// gigadata has a table id string before the rest of the number data\r\n\t\t\t\t\t// whereas per_object.csv does not\r\n\t\t\t\t\tif (useGigaData) {\r\n\t\t\t\t\t\treturn lineBlob.text().then((r) => {\r\n\t\t\t\t\t\t\treturn r\r\n\t\t\t\t\t\t\t\t.trim('\\n')\r\n\t\t\t\t\t\t\t\t.split(',')\r\n\t\t\t\t\t\t\t\t.map((e, i) => (i == 0 ? e : Number(e)));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn lineBlob.text().then((r) => {\r\n\t\t\t\t\t\t\treturn r\r\n\t\t\t\t\t\t\t\t.trim('\\n')\r\n\t\t\t\t\t\t\t\t.split(',')\r\n\t\t\t\t\t\t\t\t.map((e, i) => Number(e));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// take the middle of the csv and extract 100 lines from there\r\n\t\t\t\tPromise.all(new Array(100).fill().map((e, i) => makeLineBlobPromise(index + i))).then((r) => {\r\n\t\t\t\t\tconst timeFinished = performance.now();\r\n\t\t\t\t\tconsole.log(`line extracting took ${timeFinished - timeBeforeExtractingLines} milliseconds.`);\r\n\t\t\t\t\tconsole.log(r);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t};\r\n\r\n\t// some material ui theme I copied just cause\r\n\tconst AntSwitch = withStyles((theme) => ({\r\n\t\troot: {\r\n\t\t\twidth: 28,\r\n\t\t\theight: 16,\r\n\t\t\tpadding: 0,\r\n\t\t\tdisplay: 'flex',\r\n\t\t},\r\n\t\tswitchBase: {\r\n\t\t\tpadding: 2,\r\n\t\t\tcolor: theme.palette.grey[500],\r\n\t\t\t'&$checked': {\r\n\t\t\t\ttransform: 'translateX(12px)',\r\n\t\t\t\tcolor: theme.palette.common.white,\r\n\t\t\t\t'& + $track': {\r\n\t\t\t\t\topacity: 1,\r\n\t\t\t\t\tbackgroundColor: theme.palette.primary.main,\r\n\t\t\t\t\tborderColor: theme.palette.primary.main,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t\tthumb: {\r\n\t\t\twidth: 12,\r\n\t\t\theight: 12,\r\n\t\t\tboxShadow: 'none',\r\n\t\t},\r\n\t\ttrack: {\r\n\t\t\tborder: `1px solid ${theme.palette.grey[500]}`,\r\n\t\t\tborderRadius: 16 / 2,\r\n\t\t\topacity: 1,\r\n\t\t\tbackgroundColor: theme.palette.common.white,\r\n\t\t},\r\n\t\tchecked: {},\r\n\t}))(Switch);\r\n\r\n\t// I want to keep track of if the user wants to parse the giga data\r\n\tconst handleChange = function () {\r\n\t\tsetCheckedState(!checkedState);\r\n\t\tsetUseGigaData(!useGigaData);\r\n\r\n\t\tconsole.log(!checkedState);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Fab aria-label=\"save\" color=\"primary\" component=\"label\">\r\n\t\t\t\tupload csv\r\n\t\t\t\t<input type=\"file\" hidden onChange={handleUpload} />\r\n\t\t\t</Fab>\r\n\t\t\t<Typography component=\"div\">\r\n\t\t\t\t<Grid component=\"label\" container alignItems=\"center\" spacing={1}>\r\n\t\t\t\t\t<Grid item>use per_object</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<AntSwitch checked={checkedState} onChange={handleChange} name=\"checkedC\" />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>use giga data</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Typography>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CountNewlinesDemo;\r\n"],"sourceRoot":""}